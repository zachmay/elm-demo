var _bartavelle$json_helpers$Json_Helpers_ops = _bartavelle$json_helpers$Json_Helpers_ops || {};
_bartavelle$json_helpers$Json_Helpers_ops[':='] = _elm_lang$core$Json_Decode$field;
var _bartavelle$json_helpers$Json_Helpers_ops = _bartavelle$json_helpers$Json_Helpers_ops || {};
_bartavelle$json_helpers$Json_Helpers_ops['>>='] = _elm_lang$core$Basics$flip(_elm_lang$core$Json_Decode$andThen);
var _bartavelle$json_helpers$Json_Helpers$decodeSet = function (d) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Set$fromList,
		_elm_lang$core$Json_Decode$list(d));
};
var _bartavelle$json_helpers$Json_Helpers$encodeSet = F2(
	function (e, s) {
		return _elm_lang$core$Json_Encode$list(
			A2(
				_elm_lang$core$List$map,
				e,
				_elm_lang$core$Set$toList(s)));
	});
var _bartavelle$json_helpers$Json_Helpers$encodeMap = F2(
	function (encKey, encVal) {
		var encKey_ = function (x) {
			var _p0 = A2(
				_elm_lang$core$Json_Decode$decodeValue,
				_elm_lang$core$Json_Decode$string,
				encKey(x));
			if (_p0.ctor === 'Err') {
				return _elm_lang$core$Basics$toString(x);
			} else {
				return _p0._0;
			}
		};
		return function (_p1) {
			return _elm_lang$core$Json_Encode$object(
				A2(
					_elm_lang$core$List$map,
					function (_p2) {
						var _p3 = _p2;
						return {
							ctor: '_Tuple2',
							_0: encKey_(_p3._0),
							_1: encVal(_p3._1)
						};
					},
					_elm_lang$core$Dict$toList(_p1)));
		};
	});
var _bartavelle$json_helpers$Json_Helpers$jsonEncDict = _bartavelle$json_helpers$Json_Helpers$encodeMap;
var _bartavelle$json_helpers$Json_Helpers$decodeSumNullaries = F2(
	function (typename, mapping) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (s) {
				var _p4 = A2(_elm_lang$core$Dict$get, s, mapping);
				if (_p4.ctor === 'Nothing') {
					return _elm_lang$core$Json_Decode$fail(
						A2(_elm_lang$core$Basics_ops['++'], 'Could not decode ', typename));
				} else {
					return _elm_lang$core$Json_Decode$succeed(_p4._0);
				}
			},
			_elm_lang$core$Json_Decode$string);
	});
var _bartavelle$json_helpers$Json_Helpers$decodeSumUnaries = _bartavelle$json_helpers$Json_Helpers$decodeSumNullaries;
var _bartavelle$json_helpers$Json_Helpers$encodeSumTaggedObject = F4(
	function (fieldname, contentname, mkkeyval, v) {
		var _p5 = mkkeyval(v);
		var key = _p5._0;
		var $eval = _p5._1;
		var kp = {
			ctor: '_Tuple2',
			_0: fieldname,
			_1: _elm_lang$core$Json_Encode$string(key)
		};
		var _p6 = $eval;
		if (_p6.ctor === 'EValue') {
			return _elm_lang$core$Json_Encode$object(
				{
					ctor: '::',
					_0: kp,
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: contentname, _1: _p6._0},
						_1: {ctor: '[]'}
					}
				});
		} else {
			return _elm_lang$core$Json_Encode$object(
				{ctor: '::', _0: kp, _1: _p6._0});
		}
	});
var _bartavelle$json_helpers$Json_Helpers$decodeSumFinal = F4(
	function (name, key, value, mapping) {
		var _p7 = A2(_elm_lang$core$Dict$get, key, mapping);
		if (_p7.ctor === 'Nothing') {
			return _elm_lang$core$Result$Err(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Unknown constructor ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						key,
						A2(_elm_lang$core$Basics_ops['++'], ' for type ', name))));
		} else {
			return A2(_elm_lang$core$Json_Decode$decodeValue, _p7._0, value);
		}
	});
var _bartavelle$json_helpers$Json_Helpers$customDecoder = F2(
	function (decoder, toResult) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (a) {
				var _p8 = toResult(a);
				if (_p8.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(_p8._0);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p8._0);
				}
			},
			decoder);
	});
var _bartavelle$json_helpers$Json_Helpers$decodeSumObjectWithSingleField = F2(
	function (name, mapping) {
		return A2(
			_bartavelle$json_helpers$Json_Helpers$customDecoder,
			_elm_lang$core$Json_Decode$keyValuePairs(_elm_lang$core$Json_Decode$value),
			function (lst) {
				var _p9 = lst;
				if (((_p9.ctor === '::') && (_p9._0.ctor === '_Tuple2')) && (_p9._1.ctor === '[]')) {
					return A4(_bartavelle$json_helpers$Json_Helpers$decodeSumFinal, name, _p9._0._0, _p9._0._1, mapping);
				} else {
					return _elm_lang$core$Result$Err(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Can\'t decode ',
							A2(_elm_lang$core$Basics_ops['++'], name, ': object has too many keys')));
				}
			});
	});
var _bartavelle$json_helpers$Json_Helpers$decodeSumNullaryOrSingleField = F3(
	function (name, nullary, singlefield) {
		return _elm_lang$core$Json_Decode$oneOf(
			{
				ctor: '::',
				_0: A2(_bartavelle$json_helpers$Json_Helpers$decodeSumUnaries, name, nullary),
				_1: {
					ctor: '::',
					_0: A2(_bartavelle$json_helpers$Json_Helpers$decodeSumObjectWithSingleField, name, singlefield),
					_1: {ctor: '[]'}
				}
			});
	});
var _bartavelle$json_helpers$Json_Helpers$decodeSumTaggedObject = F5(
	function (name, fieldname, contentname, mapping, objectKeys) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (key) {
				var decoder = A2(_elm_lang$core$Set$member, key, objectKeys) ? _elm_lang$core$Json_Decode$value : A2(_elm_lang$core$Json_Decode$field, contentname, _elm_lang$core$Json_Decode$value);
				return A2(
					_bartavelle$json_helpers$Json_Helpers$customDecoder,
					decoder,
					function (value) {
						return A4(_bartavelle$json_helpers$Json_Helpers$decodeSumFinal, name, key, value, mapping);
					});
			},
			A2(_elm_lang$core$Json_Decode$field, fieldname, _elm_lang$core$Json_Decode$string));
	});
var _bartavelle$json_helpers$Json_Helpers$tuple2 = F3(
	function (abv, da, db) {
		return A3(
			_elm_lang$core$Json_Decode$map2,
			abv,
			A2(_elm_lang$core$Json_Decode$index, 0, da),
			A2(_elm_lang$core$Json_Decode$index, 1, db));
	});
var _bartavelle$json_helpers$Json_Helpers$decodeSumTwoElemArray = F2(
	function (name, mapping) {
		return A2(
			_bartavelle$json_helpers$Json_Helpers$customDecoder,
			A3(
				_bartavelle$json_helpers$Json_Helpers$tuple2,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				_elm_lang$core$Json_Decode$string,
				_elm_lang$core$Json_Decode$value),
			function (_p10) {
				var _p11 = _p10;
				return A4(_bartavelle$json_helpers$Json_Helpers$decodeSumFinal, name, _p11._0, _p11._1, mapping);
			});
	});
var _bartavelle$json_helpers$Json_Helpers$resmapM = F2(
	function (f, lst) {
		var _p12 = lst;
		if (_p12.ctor === '[]') {
			return _elm_lang$core$Result$Ok(
				{ctor: '[]'});
		} else {
			return A2(
				_elm_lang$core$Result$andThen,
				function (nx) {
					return A2(
						_elm_lang$core$Result$andThen,
						function (nxs) {
							return _elm_lang$core$Result$Ok(
								{ctor: '::', _0: nx, _1: nxs});
						},
						A2(_bartavelle$json_helpers$Json_Helpers$resmapM, f, _p12._1));
				},
				f(_p12._0));
		}
	});
var _bartavelle$json_helpers$Json_Helpers$decodeMap = F2(
	function (decKey, decVal) {
		var decodeKey = function (_p13) {
			var _p14 = _p13;
			return A2(
				_elm_lang$core$Result$map,
				function (nk) {
					return {ctor: '_Tuple2', _0: nk, _1: _p14._1};
				},
				A2(_elm_lang$core$Json_Decode$decodeString, decKey, _p14._0));
		};
		var decodeKeys = _bartavelle$json_helpers$Json_Helpers$resmapM(decodeKey);
		return A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$Dict$fromList,
			A2(
				_bartavelle$json_helpers$Json_Helpers$customDecoder,
				_elm_lang$core$Json_Decode$keyValuePairs(decVal),
				decodeKeys));
	});
var _bartavelle$json_helpers$Json_Helpers$jsonDecDict = _bartavelle$json_helpers$Json_Helpers$decodeMap;
var _bartavelle$json_helpers$Json_Helpers$maybeEncode = F2(
	function (e, v) {
		var _p15 = v;
		if (_p15.ctor === 'Nothing') {
			return _elm_lang$core$Json_Encode$null;
		} else {
			return e(_p15._0);
		}
	});
var _bartavelle$json_helpers$Json_Helpers$oeValue = function (x) {
	var _p16 = x;
	if (_p16.ctor === 'EObject') {
		return _elm_lang$core$Json_Encode$object(_p16._0);
	} else {
		return _p16._0;
	}
};
var _bartavelle$json_helpers$Json_Helpers$encodeSumObjectWithSingleField = F2(
	function (mkkeyval, v) {
		var _p17 = mkkeyval(v);
		var key = _p17._0;
		var val = _p17._1;
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: key,
					_1: _bartavelle$json_helpers$Json_Helpers$oeValue(val)
				},
				_1: {ctor: '[]'}
			});
	});
var _bartavelle$json_helpers$Json_Helpers$encodeSumTwoElementArray = F2(
	function (mkkeyval, v) {
		var _p18 = mkkeyval(v);
		var key = _p18._0;
		var val = _p18._1;
		return _elm_lang$core$Json_Encode$list(
			{
				ctor: '::',
				_0: _elm_lang$core$Json_Encode$string(key),
				_1: {
					ctor: '::',
					_0: _bartavelle$json_helpers$Json_Helpers$oeValue(val),
					_1: {ctor: '[]'}
				}
			});
	});
var _bartavelle$json_helpers$Json_Helpers$EValue = function (a) {
	return {ctor: 'EValue', _0: a};
};
var _bartavelle$json_helpers$Json_Helpers$encodeValue = _bartavelle$json_helpers$Json_Helpers$EValue;
var _bartavelle$json_helpers$Json_Helpers$EObject = function (a) {
	return {ctor: 'EObject', _0: a};
};
var _bartavelle$json_helpers$Json_Helpers$encodeObject = _bartavelle$json_helpers$Json_Helpers$EObject;
